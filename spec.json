{"openapi": "3.0.2", "info": {"title": "Flashcards API", "description": "API Docs for flashcards-server", "version": "__version__"}, "paths": {"/algorithms/": {"get": {"tags": ["algorithms"], "summary": "Get Algorithms", "operationId": "get_algorithms_algorithms__get", "parameters": [{"required": false, "schema": {"title": "Offset", "type": "integer", "default": 0}, "name": "offset", "in": "query"}, {"required": false, "schema": {"title": "Limit", "type": "integer", "default": 100}, "name": "limit", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response Get Algorithms Algorithms  Get", "type": "array", "items": {"type": "string"}}}}}, "404": {"description": "Not found"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/decks": {"get": {"tags": ["decks"], "summary": "Get My Decks", "operationId": "get_my_decks_decks_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response Get My Decks Decks Get", "type": "array", "items": {"$ref": "#/components/schemas/Deck"}}}}}, "404": {"description": "Not found"}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/decks/{deck_id}": {"get": {"tags": ["decks"], "summary": "Get Deck", "description": "Get all the details of a deck.\n\n:param deck_id: the id of the deck to get\n:returns: The details of the deck. Cards list not included, use ``/deck/<uuid>/cards``", "operationId": "get_deck_decks__deck_id__get", "parameters": [{"required": true, "schema": {"title": "Deck Id", "type": "string", "format": "uuid"}, "name": "deck_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Deck"}}}}, "404": {"description": "Not found"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}, "delete": {"tags": ["decks"], "summary": "Delete Deck", "description": "Removes the given deck\n\n:param deck_id: the id of the deck to remove\n:returns: None", "operationId": "delete_deck_decks__deck_id__delete", "parameters": [{"required": true, "schema": {"title": "Deck Id", "type": "string", "format": "uuid"}, "name": "deck_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "404": {"description": "Not found"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}, "patch": {"tags": ["decks"], "summary": "Edit Deck", "description": "Edits the details of the given deck\n\n:param deck_id: the id of the deck to be modified\n:param new_deck_data: the new details of the deck. Can be partial.\n:returns: The modified deck. Cards list not included, use ``/deck/<uuid>/cards``", "operationId": "edit_deck_decks__deck_id__patch", "parameters": [{"required": true, "schema": {"title": "Deck Id", "type": "string", "format": "uuid"}, "name": "deck_id", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeckPatch"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Deck"}}}}, "404": {"description": "Not found"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/decks/": {"post": {"tags": ["decks"], "summary": "Create Deck", "description": "Creates a new deck with the given data.\n\n:param deck: the details of the new deck.\n:returns: The new deck", "operationId": "create_deck_decks__post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeckCreate"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Deck"}}}}, "404": {"description": "Not found"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/decks/{deck_id}/cards": {"get": {"tags": ["decks"], "summary": "Get Cards", "description": "Get all the cards for a deck (paginated, if needed).\n\n:param deck_id: the id of the deck this card belongs to\n:param offset: for pagination, index at which to start returning cards.\n:param limit: for pagination, maximum number of cards to return.\n:returns: List of cards.", "operationId": "get_cards_decks__deck_id__cards_get", "parameters": [{"required": true, "schema": {"title": "Deck Id", "type": "string", "format": "uuid"}, "name": "deck_id", "in": "path"}, {"required": false, "schema": {"title": "Offset", "type": "integer", "default": 0}, "name": "offset", "in": "query"}, {"required": false, "schema": {"title": "Limit", "type": "integer", "default": 100}, "name": "limit", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response Get Cards Decks  Deck Id  Cards Get", "type": "array", "items": {"$ref": "#/components/schemas/Card"}}}}}, "404": {"description": "Not found"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}, "post": {"tags": ["decks"], "summary": "Create Card", "description": "Creates a new card with the given data.\n\n:param deck_id: the id of the deck this card will belong to\n:param card: the details of the new card.\n:returns: The new card", "operationId": "create_card_decks__deck_id__cards_post", "parameters": [{"required": true, "schema": {"title": "Deck Id", "type": "string", "format": "uuid"}, "name": "deck_id", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CardCreate"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Card"}}}}, "404": {"description": "Not found"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/decks/{deck_id}/cards/{card_id}": {"get": {"tags": ["decks"], "summary": "Get Card", "description": "Get all the details of one card.\n\n:param deck_id: the id of the deck this card belongs to\n:param card_id: the id of the card to get\n:returns: The details of the card.", "operationId": "get_card_decks__deck_id__cards__card_id__get", "parameters": [{"required": true, "schema": {"title": "Deck Id", "type": "string", "format": "uuid"}, "name": "deck_id", "in": "path"}, {"required": true, "schema": {"title": "Card Id", "type": "string", "format": "uuid"}, "name": "card_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Card"}}}}, "404": {"description": "Not found"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}, "delete": {"tags": ["decks"], "summary": "Delete Card", "description": "Removes the given card from this deck\n\n:param deck_id: the id of the deck to remove the card from\n:param card_id: the id of the card to delete\n:returns: None", "operationId": "delete_card_decks__deck_id__cards__card_id__delete", "parameters": [{"required": true, "schema": {"title": "Deck Id", "type": "string", "format": "uuid"}, "name": "deck_id", "in": "path"}, {"required": true, "schema": {"title": "Card Id", "type": "string", "format": "uuid"}, "name": "card_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "404": {"description": "Not found"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}, "patch": {"tags": ["decks"], "summary": "Edit Card", "description": "Edits the details of the given card\n\n:param deck_id: the id of the deck this card belongs to\n:param card_id: the id of the card to edit\n:param new_card_data: the new details of the card. Can be partial.\n:returns: The modified card", "operationId": "edit_card_decks__deck_id__cards__card_id__patch", "parameters": [{"required": true, "schema": {"title": "Deck Id", "type": "string", "format": "uuid"}, "name": "deck_id", "in": "path"}, {"required": true, "schema": {"title": "Card Id", "type": "string", "format": "uuid"}, "name": "card_id", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CardPatch"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Card"}}}}, "404": {"description": "Not found"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/decks/{deck_id}/cards/{card_id}/reviews": {"get": {"tags": ["decks"], "summary": "Get Reviews", "description": "Get all the reviews done on this card.\n\n:param deck_id: the id of the deck this card belongs to\n:param card_id: the id of the card to get the reviews of\n:returns: The reviews of the card.", "operationId": "get_reviews_decks__deck_id__cards__card_id__reviews_get", "parameters": [{"required": true, "schema": {"title": "Deck Id", "type": "string", "format": "uuid"}, "name": "deck_id", "in": "path"}, {"required": true, "schema": {"title": "Card Id", "type": "string", "format": "uuid"}, "name": "card_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response Get Reviews Decks  Deck Id  Cards  Card Id  Reviews Get", "type": "array", "items": {"$ref": "#/components/schemas/Review"}}}}}, "404": {"description": "Not found"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/decks/{deck_id}/cards/{card_id}/tags/{tag_name}": {"put": {"tags": ["decks"], "summary": "Assign Tag To Card", "description": "Assign this tag to the card.\n\n:param deck_id: the id of the deck this card belongs to\n:param card_id: the id of the card to edit\n:param tag_name: the tag to assign to this card\n:returns: The modified card", "operationId": "assign_tag_to_card_decks__deck_id__cards__card_id__tags__tag_name__put", "parameters": [{"required": true, "schema": {"title": "Deck Id", "type": "string", "format": "uuid"}, "name": "deck_id", "in": "path"}, {"required": true, "schema": {"title": "Card Id", "type": "string", "format": "uuid"}, "name": "card_id", "in": "path"}, {"required": true, "schema": {"title": "Tag Name", "type": "string"}, "name": "tag_name", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Card"}}}}, "404": {"description": "Not found"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}, "delete": {"tags": ["decks"], "summary": "Remove Tag From Card", "description": "Remove this tag from the card.\n\n:param deck_id: the id of the deck this card belongs to\n:param card_id: the id of the card to edit\n:param tag_name: the tag to remove from this card\n:returns: The modified card", "operationId": "remove_tag_from_card_decks__deck_id__cards__card_id__tags__tag_name__delete", "parameters": [{"required": true, "schema": {"title": "Deck Id", "type": "string", "format": "uuid"}, "name": "deck_id", "in": "path"}, {"required": true, "schema": {"title": "Card Id", "type": "string", "format": "uuid"}, "name": "card_id", "in": "path"}, {"required": true, "schema": {"title": "Tag Name", "type": "string"}, "name": "tag_name", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Card"}}}}, "404": {"description": "Not found"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/decks/{deck_id}/cards/{card_id}/context/question/{fact_id}": {"put": {"tags": ["decks"], "summary": "Assign Question Context To Card", "description": "Assign this fact as a context for the question of the card.\n\n:param deck_id: the id of the deck this card belongs to\n:param card_id: the id of the card to edit\n:param fact_id: the fact to assign as question context to this card\n:returns: The modified card", "operationId": "assign_question_context_to_card_decks__deck_id__cards__card_id__context_question__fact_id__put", "parameters": [{"required": true, "schema": {"title": "Deck Id", "type": "string", "format": "uuid"}, "name": "deck_id", "in": "path"}, {"required": true, "schema": {"title": "Card Id", "type": "string", "format": "uuid"}, "name": "card_id", "in": "path"}, {"required": true, "schema": {"title": "Fact Id", "type": "string", "format": "uuid"}, "name": "fact_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Card"}}}}, "404": {"description": "Not found"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}, "delete": {"tags": ["decks"], "summary": "Remove Question Context From Card", "description": "Remove this fact from the question context of the card.\n\n:param deck_id: the id of the deck this card belongs to\n:param card_id: the id of the card to edit\n:param fact_id: the id of the fact to remove from the question context\n:returns: The modified card", "operationId": "remove_question_context_from_card_decks__deck_id__cards__card_id__context_question__fact_id__delete", "parameters": [{"required": true, "schema": {"title": "Deck Id", "type": "string", "format": "uuid"}, "name": "deck_id", "in": "path"}, {"required": true, "schema": {"title": "Card Id", "type": "string", "format": "uuid"}, "name": "card_id", "in": "path"}, {"required": true, "schema": {"title": "Fact Id", "type": "string", "format": "uuid"}, "name": "fact_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Card"}}}}, "404": {"description": "Not found"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/decks/{deck_id}/cards/{card_id}/context/answer/{fact_id}": {"put": {"tags": ["decks"], "summary": "Assign Answer Context To Card", "description": "Assign this fact as a context for the answer of the card.\n\n:param deck_id: the id of the deck this card belongs to\n:param card_id: the id of the card to edit\n:param fact_id: the fact to assign as answer context to this card\n:returns: The modified card", "operationId": "assign_answer_context_to_card_decks__deck_id__cards__card_id__context_answer__fact_id__put", "parameters": [{"required": true, "schema": {"title": "Deck Id", "type": "string", "format": "uuid"}, "name": "deck_id", "in": "path"}, {"required": true, "schema": {"title": "Card Id", "type": "string", "format": "uuid"}, "name": "card_id", "in": "path"}, {"required": true, "schema": {"title": "Fact Id", "type": "string", "format": "uuid"}, "name": "fact_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Card"}}}}, "404": {"description": "Not found"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}, "delete": {"tags": ["decks"], "summary": "Remove Answer Context From Card", "description": "Remove this fact from the answer context of the card.\n\n:param deck_id: the id of the deck this card belongs to\n:param card_id: the id of the card to edit\n:param fact_id: the id of the fact to remove from the answer context\n:returns: The modified card", "operationId": "remove_answer_context_from_card_decks__deck_id__cards__card_id__context_answer__fact_id__delete", "parameters": [{"required": true, "schema": {"title": "Deck Id", "type": "string", "format": "uuid"}, "name": "deck_id", "in": "path"}, {"required": true, "schema": {"title": "Card Id", "type": "string", "format": "uuid"}, "name": "card_id", "in": "path"}, {"required": true, "schema": {"title": "Fact Id", "type": "string", "format": "uuid"}, "name": "fact_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Card"}}}}, "404": {"description": "Not found"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/facts/{fact_id}": {"get": {"tags": ["facts"], "summary": "Get Fact", "description": "Get all the details of one fact.\n\n:param fact_id: the id of the fact to get\n:returns: The details of the fact.", "operationId": "get_fact_facts__fact_id__get", "parameters": [{"required": true, "schema": {"title": "Fact Id", "type": "string", "format": "uuid"}, "name": "fact_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Fact"}}}}, "404": {"description": "Not found"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "patch": {"tags": ["facts"], "summary": "Edit Fact", "description": "Edits the details of the given fact\n\n:param fact_id: the id of the fact to edit\n:param new_fact_data: the new details of the fact. Can be partial.\n:returns: The modified fact", "operationId": "edit_fact_facts__fact_id__patch", "parameters": [{"required": true, "schema": {"title": "Fact Id", "type": "string", "format": "uuid"}, "name": "fact_id", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/FactPatch"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Fact"}}}}, "404": {"description": "Not found"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/facts/tag/{tag_name}": {"get": {"tags": ["facts"], "summary": "Get Fact By Tag", "description": "Get all the details of the facts which have this tag assigned.\n\n:param tag_name: the name of the tag to filter facts on\n:param offset: for pagination, index at which to start returning values.\n:param limit: for pagination, maximum number of elements to return.\n:returns: The list of facts with this tag.", "operationId": "get_fact_by_tag_facts_tag__tag_name__get", "parameters": [{"required": true, "schema": {"title": "Tag Name", "type": "string"}, "name": "tag_name", "in": "path"}, {"required": false, "schema": {"title": "Offset", "type": "integer", "default": 0}, "name": "offset", "in": "query"}, {"required": false, "schema": {"title": "Limit", "type": "integer", "default": 100}, "name": "limit", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response Get Fact By Tag Facts Tag  Tag Name  Get", "type": "array", "items": {"$ref": "#/components/schemas/Fact"}}}}}, "404": {"description": "Not found"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/facts/": {"post": {"tags": ["facts"], "summary": "Create Fact", "description": "Creates a new fact with the given data.\n\n:param fact: the details of the new fact.\n:returns: The new fact", "operationId": "create_fact_facts__post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/FactCreate"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Fact"}}}}, "404": {"description": "Not found"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/facts/{fact_id}/tags/{tag_name}": {"put": {"tags": ["facts"], "summary": "Assign Tag To Fact", "description": "Assign this tag to the fact.\n\n:param fact_id: the id of the fact to edit\n:param tag_name: the tag to assign to this fact\n:returns: The modified fact", "operationId": "assign_tag_to_fact_facts__fact_id__tags__tag_name__put", "parameters": [{"required": true, "schema": {"title": "Fact Id", "type": "string", "format": "uuid"}, "name": "fact_id", "in": "path"}, {"required": true, "schema": {"title": "Tag Name", "type": "string"}, "name": "tag_name", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Fact"}}}}, "404": {"description": "Not found"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["facts"], "summary": "Remove Tag From Fact", "description": "Remove this tag from the fact.\n\n:param fact_id: the id of the fact to edit\n:param tag_name: the tag to remove from this fact\n:returns: The modified fact", "operationId": "remove_tag_from_fact_facts__fact_id__tags__tag_name__delete", "parameters": [{"required": true, "schema": {"title": "Fact Id", "type": "string", "format": "uuid"}, "name": "fact_id", "in": "path"}, {"required": true, "schema": {"title": "Tag Name", "type": "string"}, "name": "tag_name", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Fact"}}}}, "404": {"description": "Not found"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/tags/": {"get": {"tags": ["tags"], "summary": "Get Tags", "operationId": "get_tags_tags__get", "parameters": [{"required": false, "schema": {"title": "Offset", "type": "integer", "default": 0}, "name": "offset", "in": "query"}, {"required": false, "schema": {"title": "Limit", "type": "integer", "default": 100}, "name": "limit", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response Get Tags Tags  Get", "type": "array", "items": {"$ref": "#/components/schemas/Tag"}}}}}, "404": {"description": "Not found"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "post": {"tags": ["tags"], "summary": "Create Tag", "operationId": "create_tag_tags__post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TagCreate"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Tag"}}}}, "404": {"description": "Not found"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/tags/{tag_name}": {"get": {"tags": ["tags"], "summary": "Get Tag", "operationId": "get_tag_tags__tag_name__get", "parameters": [{"required": true, "schema": {"title": "Tag Name", "type": "string"}, "name": "tag_name", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Tag"}}}}, "404": {"description": "Not found"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["tags"], "summary": "Delete Tag", "operationId": "delete_tag_tags__tag_name__delete", "parameters": [{"required": true, "schema": {"title": "Tag Name", "type": "string"}, "name": "tag_name", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "404": {"description": "Not found"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "patch": {"tags": ["tags"], "summary": "Edit Tag", "operationId": "edit_tag_tags__tag_name__patch", "parameters": [{"required": true, "schema": {"title": "Tag Name", "type": "string"}, "name": "tag_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TagCreate"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Tag"}}}}, "404": {"description": "Not found"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/study/{deck_id}/start": {"get": {"tags": ["study"], "summary": "First Card", "description": "Get the first card to study.\n\n:param deck_id: the deck being studied\n:returns: the next card to study", "operationId": "first_card_study__deck_id__start_get", "parameters": [{"required": true, "schema": {"title": "Deck Id", "type": "string", "format": "uuid"}, "name": "deck_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Card"}}}}, "404": {"description": "Not found"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/study/{deck_id}/next": {"post": {"tags": ["study"], "summary": "Next Card", "description": "Processes the result of the previous test and returns the\nnext card to study.\n\n:param deck_id: the deck being studied\n:param result: the result of the test (algorithm dependent)\n:returns: the next card to study", "operationId": "next_card_study__deck_id__next_post", "parameters": [{"required": true, "schema": {"title": "Deck Id", "type": "string", "format": "uuid"}, "name": "deck_id", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TestData"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Card"}}}}, "404": {"description": "Not found"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/login": {"post": {"tags": ["auth"], "summary": "Auth:Jwt.Login", "operationId": "auth_jwt_login_login_post", "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Body_auth_jwt_login_login_post"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/BearerResponse"}, "example": {"access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiOTIyMWZmYzktNjQwZi00MzcyLTg2ZDMtY2U2NDJjYmE1NjAzIiwiYXVkIjoiZmFzdGFwaS11c2VyczphdXRoIiwiZXhwIjoxNTcxNTA0MTkzfQ.M10bjOe45I5Ncu_uXvOmVV8QxnL-nZfcH96U90JaocI", "token_type": "bearer"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorModel"}, "examples": {"LOGIN_BAD_CREDENTIALS": {"summary": "Bad credentials or the user is inactive.", "value": {"detail": "LOGIN_BAD_CREDENTIALS"}}, "LOGIN_USER_NOT_VERIFIED": {"summary": "The user is not verified.", "value": {"detail": "LOGIN_USER_NOT_VERIFIED"}}}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/logout": {"post": {"tags": ["auth"], "summary": "Auth:Jwt.Logout", "operationId": "auth_jwt_logout_logout_post", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "401": {"description": "Missing token or inactive user."}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/register": {"post": {"tags": ["auth"], "summary": "Register:Register", "operationId": "register_register_register_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserCreate"}}}, "required": true}, "responses": {"201": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorModel"}, "examples": {"REGISTER_USER_ALREADY_EXISTS": {"summary": "A user with this email already exists.", "value": {"detail": "REGISTER_USER_ALREADY_EXISTS"}}, "REGISTER_INVALID_PASSWORD": {"summary": "Password validation failed.", "value": {"detail": {"code": "REGISTER_INVALID_PASSWORD", "reason": "Password should beat least 3 characters"}}}}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/forgot-password": {"post": {"tags": ["auth"], "summary": "Reset:Forgot Password", "operationId": "reset_forgot_password_forgot_password_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Body_reset_forgot_password_forgot_password_post"}}}, "required": true}, "responses": {"202": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/reset-password": {"post": {"tags": ["auth"], "summary": "Reset:Reset Password", "operationId": "reset_reset_password_reset_password_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Body_reset_reset_password_reset_password_post"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorModel"}, "examples": {"RESET_PASSWORD_BAD_TOKEN": {"summary": "Bad or expired token.", "value": {"detail": "RESET_PASSWORD_BAD_TOKEN"}}, "RESET_PASSWORD_INVALID_PASSWORD": {"summary": "Password validation failed.", "value": {"detail": {"code": "RESET_PASSWORD_INVALID_PASSWORD", "reason": "Password should be at least 3 characters"}}}}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/request-verify-token": {"post": {"tags": ["auth"], "summary": "Verify:Request-Token", "operationId": "verify_request_token_request_verify_token_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Body_verify_request_token_request_verify_token_post"}}}, "required": true}, "responses": {"202": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/verify": {"post": {"tags": ["auth"], "summary": "Verify:Verify", "operationId": "verify_verify_verify_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Body_verify_verify_verify_post"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorModel"}, "examples": {"VERIFY_USER_BAD_TOKEN": {"summary": "Bad token, not existing user ornot the e-mail currently set for the user.", "value": {"detail": "VERIFY_USER_BAD_TOKEN"}}, "VERIFY_USER_ALREADY_VERIFIED": {"summary": "The user is already verified.", "value": {"detail": "VERIFY_USER_ALREADY_VERIFIED"}}}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/users/me": {"get": {"tags": ["users"], "summary": "Users:Current User", "operationId": "users_current_user_users_me_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "401": {"description": "Missing token or inactive user."}}, "security": [{"OAuth2PasswordBearer": []}]}, "patch": {"tags": ["users"], "summary": "Users:Patch Current User", "operationId": "users_patch_current_user_users_me_patch", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserUpdate"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "401": {"description": "Missing token or inactive user."}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorModel"}, "examples": {"UPDATE_USER_EMAIL_ALREADY_EXISTS": {"summary": "A user with this email already exists.", "value": {"detail": "UPDATE_USER_EMAIL_ALREADY_EXISTS"}}, "UPDATE_USER_INVALID_PASSWORD": {"summary": "Password validation failed.", "value": {"detail": {"code": "UPDATE_USER_INVALID_PASSWORD", "reason": "Password should beat least 3 characters"}}}}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/users/{id}": {"get": {"tags": ["users"], "summary": "Users:User", "operationId": "users_user_users__id__get", "parameters": [{"required": true, "schema": {"title": "Id", "type": "string", "format": "uuid4"}, "name": "id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "401": {"description": "Missing token or inactive user."}, "403": {"description": "Not a superuser."}, "404": {"description": "The user does not exist."}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}, "delete": {"tags": ["users"], "summary": "Users:Delete User", "operationId": "users_delete_user_users__id__delete", "parameters": [{"required": true, "schema": {"title": "Id", "type": "string", "format": "uuid4"}, "name": "id", "in": "path"}], "responses": {"204": {"description": "Successful Response"}, "401": {"description": "Missing token or inactive user."}, "403": {"description": "Not a superuser."}, "404": {"description": "The user does not exist."}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}, "patch": {"tags": ["users"], "summary": "Users:Patch User", "operationId": "users_patch_user_users__id__patch", "parameters": [{"required": true, "schema": {"title": "Id", "type": "string", "format": "uuid4"}, "name": "id", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserUpdate"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "401": {"description": "Missing token or inactive user."}, "403": {"description": "Not a superuser."}, "404": {"description": "The user does not exist."}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorModel"}, "examples": {"UPDATE_USER_EMAIL_ALREADY_EXISTS": {"summary": "A user with this email already exists.", "value": {"detail": "UPDATE_USER_EMAIL_ALREADY_EXISTS"}}, "UPDATE_USER_INVALID_PASSWORD": {"summary": "Password validation failed.", "value": {"detail": {"code": "UPDATE_USER_INVALID_PASSWORD", "reason": "Password should beat least 3 characters"}}}}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/": {"get": {"summary": "Root", "operationId": "root__get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}}, "components": {"schemas": {"BearerResponse": {"title": "BearerResponse", "required": ["access_token", "token_type"], "type": "object", "properties": {"access_token": {"title": "Access Token", "type": "string"}, "token_type": {"title": "Token Type", "type": "string"}}}, "Body_auth_jwt_login_login_post": {"title": "Body_auth_jwt_login_login_post", "required": ["username", "password"], "type": "object", "properties": {"grant_type": {"title": "Grant Type", "pattern": "password", "type": "string"}, "username": {"title": "Username", "type": "string"}, "password": {"title": "Password", "type": "string"}, "scope": {"title": "Scope", "type": "string", "default": ""}, "client_id": {"title": "Client Id", "type": "string"}, "client_secret": {"title": "Client Secret", "type": "string"}}}, "Body_reset_forgot_password_forgot_password_post": {"title": "Body_reset_forgot_password_forgot_password_post", "required": ["email"], "type": "object", "properties": {"email": {"title": "Email", "type": "string", "format": "email"}}}, "Body_reset_reset_password_reset_password_post": {"title": "Body_reset_reset_password_reset_password_post", "required": ["token", "password"], "type": "object", "properties": {"token": {"title": "Token", "type": "string"}, "password": {"title": "Password", "type": "string"}}}, "Body_verify_request_token_request_verify_token_post": {"title": "Body_verify_request_token_request_verify_token_post", "required": ["email"], "type": "object", "properties": {"email": {"title": "Email", "type": "string", "format": "email"}}}, "Body_verify_verify_verify_post": {"title": "Body_verify_verify_verify_post", "required": ["token"], "type": "object", "properties": {"token": {"title": "Token", "type": "string"}}}, "Card": {"title": "Card", "required": ["id", "deck_id", "question", "answer", "question_context_facts", "answer_context_facts", "tags"], "type": "object", "properties": {"id": {"title": "Id", "type": "string", "format": "uuid"}, "deck_id": {"title": "Deck Id", "type": "string", "format": "uuid"}, "question": {"$ref": "#/components/schemas/Fact"}, "answer": {"$ref": "#/components/schemas/Fact"}, "question_context_facts": {"title": "Question Context Facts", "type": "array", "items": {"$ref": "#/components/schemas/Fact"}}, "answer_context_facts": {"title": "Answer Context Facts", "type": "array", "items": {"$ref": "#/components/schemas/Fact"}}, "tags": {"title": "Tags", "type": "array", "items": {"$ref": "#/components/schemas/Tag"}}}}, "CardCreate": {"title": "CardCreate", "required": ["question_id", "answer_id"], "type": "object", "properties": {"question_id": {"title": "Question Id", "type": "string", "format": "uuid"}, "answer_id": {"title": "Answer Id", "type": "string", "format": "uuid"}, "question_context_facts": {"title": "Question Context Facts", "type": "array", "items": {"type": "string", "format": "uuid"}}, "answer_context_facts": {"title": "Answer Context Facts", "type": "array", "items": {"type": "string", "format": "uuid"}}, "tags": {"title": "Tags", "type": "array", "items": {"$ref": "#/components/schemas/TagCreate"}}}}, "CardPatch": {"title": "CardPatch", "type": "object", "properties": {"question_id": {"title": "Question Id", "type": "string", "format": "uuid"}, "answer_id": {"title": "Answer Id", "type": "string", "format": "uuid"}}}, "Deck": {"title": "Deck", "required": ["name", "description", "algorithm", "id", "parameters", "state", "tags"], "type": "object", "properties": {"name": {"title": "Name", "type": "string"}, "description": {"title": "Description", "type": "string"}, "algorithm": {"title": "Algorithm", "type": "string"}, "id": {"title": "Id", "type": "string", "format": "uuid"}, "parameters": {"title": "Parameters", "type": "object"}, "state": {"title": "State", "type": "object"}, "tags": {"title": "Tags", "type": "array", "items": {"$ref": "#/components/schemas/Tag"}}}}, "DeckCreate": {"title": "DeckCreate", "required": ["name", "description", "algorithm"], "type": "object", "properties": {"name": {"title": "Name", "type": "string"}, "description": {"title": "Description", "type": "string"}, "algorithm": {"title": "Algorithm", "type": "string"}, "parameters": {"title": "Parameters", "type": "object"}, "tags": {"title": "Tags", "type": "array", "items": {"$ref": "#/components/schemas/TagCreate"}}}}, "DeckPatch": {"title": "DeckPatch", "type": "object", "properties": {"name": {"title": "Name", "type": "string"}, "description": {"title": "Description", "type": "string"}, "algorithm": {"title": "Algorithm", "type": "string"}, "parameters": {"title": "Parameters", "type": "object"}, "tags": {"title": "Tags", "type": "array", "items": {"$ref": "#/components/schemas/TagCreate"}}, "state": {"title": "State", "type": "object"}}}, "ErrorModel": {"title": "ErrorModel", "required": ["detail"], "type": "object", "properties": {"detail": {"title": "Detail", "anyOf": [{"type": "string"}, {"type": "object", "additionalProperties": {"type": "string"}}]}}}, "Fact": {"title": "Fact", "required": ["value", "format", "id", "tags"], "type": "object", "properties": {"value": {"title": "Value", "type": "string"}, "format": {"title": "Format", "type": "string"}, "id": {"title": "Id", "type": "string", "format": "uuid"}, "tags": {"title": "Tags", "type": "array", "items": {"$ref": "#/components/schemas/Tag"}}}}, "FactCreate": {"title": "FactCreate", "required": ["value", "format"], "type": "object", "properties": {"value": {"title": "Value", "type": "string"}, "format": {"title": "Format", "type": "string"}, "tags": {"title": "Tags", "type": "array", "items": {"$ref": "#/components/schemas/TagCreate"}}}}, "FactPatch": {"title": "FactPatch", "type": "object", "properties": {"value": {"title": "Value", "type": "string"}, "format": {"title": "Format", "type": "string"}}}, "HTTPValidationError": {"title": "HTTPValidationError", "type": "object", "properties": {"detail": {"title": "Detail", "type": "array", "items": {"$ref": "#/components/schemas/ValidationError"}}}}, "Review": {"title": "Review", "required": ["id", "card_id", "algorithm", "datetime"], "type": "object", "properties": {"id": {"title": "Id", "type": "string", "format": "uuid"}, "card_id": {"title": "Card Id", "type": "string", "format": "uuid"}, "result": {"title": "Result"}, "algorithm": {"title": "Algorithm", "type": "string"}, "datetime": {"title": "Datetime", "type": "string", "format": "date-time"}}}, "Tag": {"title": "Tag", "required": ["name"], "type": "object", "properties": {"name": {"title": "Name", "type": "string"}}}, "TagCreate": {"title": "TagCreate", "required": ["name"], "type": "object", "properties": {"name": {"title": "Name", "type": "string"}}}, "TestData": {"title": "TestData", "required": ["card_id"], "type": "object", "properties": {"card_id": {"title": "Card Id", "type": "string", "format": "uuid"}, "result": {"title": "Result"}}}, "User": {"title": "User", "required": ["email"], "type": "object", "properties": {"id": {"title": "Id", "type": "string", "format": "uuid4"}, "email": {"title": "Email", "type": "string", "format": "email"}, "is_active": {"title": "Is Active", "type": "boolean", "default": true}, "is_superuser": {"title": "Is Superuser", "type": "boolean", "default": false}, "is_verified": {"title": "Is Verified", "type": "boolean", "default": false}}, "description": "Base User model."}, "UserCreate": {"title": "UserCreate", "required": ["email", "password"], "type": "object", "properties": {"email": {"title": "Email", "type": "string", "format": "email"}, "password": {"title": "Password", "type": "string"}, "is_active": {"title": "Is Active", "type": "boolean", "default": true}, "is_superuser": {"title": "Is Superuser", "type": "boolean", "default": false}, "is_verified": {"title": "Is Verified", "type": "boolean", "default": false}}}, "UserUpdate": {"title": "UserUpdate", "type": "object", "properties": {"password": {"title": "Password", "type": "string"}, "email": {"title": "Email", "type": "string", "format": "email"}, "is_active": {"title": "Is Active", "type": "boolean"}, "is_superuser": {"title": "Is Superuser", "type": "boolean"}, "is_verified": {"title": "Is Verified", "type": "boolean"}}}, "ValidationError": {"title": "ValidationError", "required": ["loc", "msg", "type"], "type": "object", "properties": {"loc": {"title": "Location", "type": "array", "items": {"type": "string"}}, "msg": {"title": "Message", "type": "string"}, "type": {"title": "Error Type", "type": "string"}}}}, "securitySchemes": {"OAuth2PasswordBearer": {"type": "oauth2", "flows": {"password": {"scopes": {}, "tokenUrl": "auth/jwt/login"}}}}}}